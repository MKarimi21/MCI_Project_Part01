# AUTOGENERATED! DO NOT EDIT! File to edit: 01_FirstDemoIntro.ipynb (unless otherwise specified).

__all__ = ['objToCat', 'sampleDF']

# Cell

import pandas as pd


# Cell

def objToCat(df):
    '''
    This function make objective column to categories and replace with int8 code
    Note: *This Function Need import DataFrame with pandas*


    ``` python
    ### Example

    >>> dataframe.info()
    >>> i Name_Column Len Dtype: object
    ...
    >>> objToCat(dataframe)
    >>> dataframe.info()
    >>> i Name_Column Len Dtype: int8

    ```

    Sign: mkarimi21
    '''


    len_of_type = len(df.dtypes)
    list_of_type = list(df.dtypes)

    object_type = []

    for i in range(len_of_type):
        if list_of_type[i] == 'object':
            object_type.append(df.columns[i])


    for i in range(len(object_type)):

        df[object_type[i]] = df[object_type[i]].astype('category').cat.codes

    return df



# Cell

import sweetviz as sv

# Cell

def sampleDF(df, column):
    '''
    Clean Data and make equal labale for classfication

    ``` python
    # Example

    >>> list(DataFrame['Column'].value_counts())
    >>> [Alpha, Beta, ...]
    ...
    >>> a = sampleDF(DataFrame, 'Column')
    >>> list(a.value_counts())
    >>> [N, N, N, ...]

    ```

    Sign: mkarimi21
    '''
    # mport library
    from random import randint


    # define column
    a = str(column)

    # 5% data
    one_percentage = (len(df[a]) // 100) * 5

    # sample data from over 1 percentage data
    df_sample = []
    len_of_count = list(range(len(df[a].value_counts())))
    list_count = list(df[a].value_counts())


    # add min count of data to sampling and create sample dataframe

    min_df = []

    for i in range(len(list_count)):
        if list_count[i] >= one_percentage:
            min_df.append(list_count[i])

    min_df_count = min(min_df)

    rndom_state = randint(1, 100)

    for i in range(len(len_of_count)):
        if len(df[df[a] == i]) > one_percentage:
            df_sample.append(df[df[a] == i].sample(n=min_df_count, random_state=rndom_state))


    split_data = pd.concat(df_sample, axis=0)

    return split_data



# Cell

from pycaret.classification import *
